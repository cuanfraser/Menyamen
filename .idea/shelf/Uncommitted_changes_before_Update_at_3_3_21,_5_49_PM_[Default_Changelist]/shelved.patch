Index: Snarl/Game/snarl/src/main/java/org/menyamen/snarl/App.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.menyamen.snarl;\n\nimport java.awt.Point;\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport org.menyamen.snarl.layout.Hallway;\nimport org.menyamen.snarl.layout.Level;\nimport org.menyamen.snarl.layout.Room;\nimport org.menyamen.snarl.objects.ExitPortal;\nimport org.menyamen.snarl.objects.GameObject;\nimport org.menyamen.snarl.objects.Key;\n\n/**\n * Main Class\n */\npublic final class App {\n    private App() {\n    }\n\n    /**\n     * Program entry point\n     * @param args The arguments of the program.\n     */\n    public static void main(String[] args) {\n\n        // Example 1\n\n        Room room1 = new Room(new Point(0, 0));\n        room1.addDoor(9, 2);\n        Room room2 = new Room(new Point(15, 0), 10, 7);\n        room2.addDoor(15, 2);\n\n        List<Room> testRooms= new ArrayList<Room>();\n        testRooms.add(room1);\n        testRooms.add(room2);\n\n        Hallway hallway1 = new Hallway(new Point(9, 2), new Point(15, 2));\n\n        List<Hallway> testHallways = new ArrayList<Hallway>();\n        testHallways.add(hallway1);\n\n        Level testLevel = new Level(testRooms, testHallways, 40, 11);\n\n        GameObject key = new Key();\n        GameObject portal = new ExitPortal();\n\n        testLevel.addObject(key, new Point(4, 7));\n        testLevel.addObject(portal, new Point(19, 2));\n\n\n        System.out.println(\"Example 1:\");\n        String printed = testLevel.print();\n\n        System.out.println(printed);\n\n        // Example 2\n\n        Room ex2Room1 = new Room(new Point(0, 0), 5, 5);\n        ex2Room1.addDoor(4, 2);\n        Room ex2Room2 = new Room(new Point(20, 10), 5, 7);\n        ex2Room2.addDoor(20, 12);\n\n        List<Room> ex2TestRooms= new ArrayList<Room>();\n        ex2TestRooms.add(ex2Room1);\n        ex2TestRooms.add(ex2Room2);\n\n        List<Point> waypoints = new ArrayList<Point>();\n        waypoints.add(new Point(10, 2));\n        waypoints.add(new Point(10, 12));\n\n        Hallway ex2Hallway1 = new Hallway(new Point(4, 2), new Point(20, 12), waypoints);\n\n        List<Hallway> ex2TestHallways = new ArrayList<Hallway>();\n        ex2TestHallways.add(ex2Hallway1);\n\n        Level ex2TestLevel = new Level(ex2TestRooms, ex2TestHallways, 40, 20);\n\n        GameObject ex2Key = new Key();\n        GameObject ex2Portal = new ExitPortal();\n\n        ex2TestLevel.addObject(ex2Key, new Point(2, 1));\n        ex2TestLevel.addObject(ex2Portal, new Point(22, 13));\n\n\n        String ex2Printed = ex2TestLevel.print();\n\n        System.out.println(\"Example 2:\");\n        System.out.println(ex2Printed);\n\n        // Example 3\n\n        // Room ex3Room1 = new Room(new Point(0, 0), 10, 3);\n        // Room ex3Room2 = new Room(new Point(15, 15), 5, 5);\n\n        // List<Room> ex3TestRooms= new ArrayList<Room>();\n        // ex3TestRooms.add(ex3Room1);\n        // ex3TestRooms.add(ex3Room2);\n\n        // List<Point> waypoints2 = new ArrayList<Point>();\n        // waypoints2.add(new Point(5, 3));\n        // waypoints2.add(new Point(5, 17));\n        // waypoints2.add(new Point(14, 17));\n\n        // Hallway ex3Hallway1 = new Hallway(waypoints2);\n\n        // List<Hallway> ex3TestHallways = new ArrayList<Hallway>();\n        // ex3TestHallways.add(ex3Hallway1);\n\n        // Level ex3TestLevel = new Level(ex3TestRooms, ex3TestHallways, 40, 30);\n\n        // GameObject ex3Key = new Key();\n        // GameObject ex3Portal = new ExitPortal();\n\n        // ex3TestLevel.addObject(ex3Key, new Point(1, 1));\n        // ex3TestLevel.addObject(ex3Portal, new Point(16, 16));\n\n\n        // String ex3Printed = ex3TestLevel.print();\n\n        // System.out.println(\"Example 3:\");\n        // System.out.println(ex3Printed);\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- Snarl/Game/snarl/src/main/java/org/menyamen/snarl/App.java	(revision 2683cde738109b37ceedf5839f2bdd561d8ff7a6)
+++ Snarl/Game/snarl/src/main/java/org/menyamen/snarl/App.java	(date 1614808959303)
@@ -88,37 +88,37 @@
         System.out.println("Example 2:");
         System.out.println(ex2Printed);
 
-        // Example 3
+         //Example 3
 
-        // Room ex3Room1 = new Room(new Point(0, 0), 10, 3);
-        // Room ex3Room2 = new Room(new Point(15, 15), 5, 5);
+         Room ex3Room1 = new Room(new Point(0, 0), 10, 3);
+         ex3Room1.addDoor(9,2);
+         Room ex3Room2 = new Room(new Point(15, 15), 5, 5);
+         ex3Room1.addDoor(15,17);
 
-        // List<Room> ex3TestRooms= new ArrayList<Room>();
-        // ex3TestRooms.add(ex3Room1);
-        // ex3TestRooms.add(ex3Room2);
+         List<Room> ex3TestRooms= new ArrayList<Room>();
+         ex3TestRooms.add(ex3Room1);
+         ex3TestRooms.add(ex3Room2);
 
-        // List<Point> waypoints2 = new ArrayList<Point>();
-        // waypoints2.add(new Point(5, 3));
-        // waypoints2.add(new Point(5, 17));
-        // waypoints2.add(new Point(14, 17));
+         List<Point> waypoints2 = new ArrayList<Point>();
+         waypoints2.add(new Point(5, 17));
 
-        // Hallway ex3Hallway1 = new Hallway(waypoints2);
+         Hallway ex3Hallway1 = new Hallway(new Point(5,3), new Point(14,17), waypoints2);
 
-        // List<Hallway> ex3TestHallways = new ArrayList<Hallway>();
-        // ex3TestHallways.add(ex3Hallway1);
+         List<Hallway> ex3TestHallways = new ArrayList<Hallway>();
+         ex3TestHallways.add(ex3Hallway1);
 
-        // Level ex3TestLevel = new Level(ex3TestRooms, ex3TestHallways, 40, 30);
+         Level ex3TestLevel = new Level(ex3TestRooms, ex3TestHallways, 40, 30);
 
-        // GameObject ex3Key = new Key();
-        // GameObject ex3Portal = new ExitPortal();
+         GameObject ex3Key = new Key();
+         GameObject ex3Portal = new ExitPortal();
 
-        // ex3TestLevel.addObject(ex3Key, new Point(1, 1));
-        // ex3TestLevel.addObject(ex3Portal, new Point(16, 16));
+         ex3TestLevel.addObject(ex3Key, new Point(1, 1));
+         ex3TestLevel.addObject(ex3Portal, new Point(16, 16));
 
 
-        // String ex3Printed = ex3TestLevel.print();
+         String ex3Printed = ex3TestLevel.print();
 
-        // System.out.println("Example 3:");
-        // System.out.println(ex3Printed);
+         System.out.println("Example 3:");
+         System.out.println(ex3Printed);
     }
 }
Index: Snarl/Planning/player.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>```java\n/**\n * Specifies The interface for a Player component which:\n * - allows a player to move 2 grid units away in any cardinal or diagonal direction\n * - determines the end of a level versus the end of the game\n * - knows when to reject invalid game states. \n */\npublic interface RuleChecker {\n\n    //constants\n    private String name;\n    private Boolean isExpelled;\n    private Point pos;\n\n  /**\n   * Move a single player from a given point to another given point. A move is valid only if\n   * the start and end points are valid. A player can move to any traversable tile up to \n   * 2 cardinal moves away from themselves (up, down, left, or right). The player can also opt to\n   * stay put by making the start and end point the same tile. \n   *\n   * @param start Point to start move.\n   * @param end Point to end move.\n   * @throws IllegalArgumentException if the move is not possible (a point is not traversable)\n   */\n  void move(Point start, Point end) throws IllegalArgumentException;\n\n  /**\n    * Void function that acts like a switch case that updates the Game Manager as the Player makes moves.\n    *\n    * @return the updated game state\n    * @throws IllegalArgumentException if the game state is invalid\n    */\n   public void update() throws IllegalArgumentException;\n\n}\n```
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- Snarl/Planning/player.md	(revision 2683cde738109b37ceedf5839f2bdd561d8ff7a6)
+++ Snarl/Planning/player.md	(date 1614807853177)
@@ -2,7 +2,7 @@
 /**
  * Specifies The interface for a Player component which:
  * - allows a player to move 2 grid units away in any cardinal or diagonal direction
- * - determines the end of a level versus the end of the game
+ * - Players should provide a unique name when registering
  * - knows when to reject invalid game states. 
  */
 public interface RuleChecker {
@@ -24,6 +24,14 @@
    */
   void move(Point start, Point end) throws IllegalArgumentException;
 
+    /**
+    * Return a boolean that validates or invalidates a player based on their username being unique 
+    *
+    * @param name String username that is to be validated
+    * @return boolean if a player is valid or not
+    */
+   boolean validateName(String name);
+
   /**
     * Void function that acts like a switch case that updates the Game Manager as the Player makes moves.
     *
@@ -32,5 +40,8 @@
     */
    public void update() throws IllegalArgumentException;
 
+
+
+
 }
 ```
\ No newline at end of file
Index: Snarl/Planning/game-manager.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>```java\n/**\n * Specifies The interface for the Game Manager which:\n * - validates and accepts players with unique name to the game \n * - and starts a game with a single level, which will be provided. \n */\npublic interface GameManager {\n\n   /**\n   * Void function that starts the game with a single level\n   *\n   * @param players List of valid players registered with unique names\n   * @param level The single level at which the game starts\n   * @throws IllegalArgumentException if the level is not possible or a Player has an invalid name\n   */\n  public void startGame(List<Player> players, Level level) throws IllegalArgumentException;\n\n   /**\n   * Return a boolean that validates or invalidates a player based on their username being unique \n   *\n   * @return boolean if a player is valid or not\n   */\n  boolean validatePlayer(Player player);\n\n   /**\n   * Void function that acts like a switch case that updates the game as the Player makes moves.\n   *\n   * @return the updated game state\n   * @throws IllegalArgumentException if the game state is invalid\n   */\n  public void update() throws IllegalArgumentException;\n\n\n}\n```
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- Snarl/Planning/game-manager.md	(revision 2683cde738109b37ceedf5839f2bdd561d8ff7a6)
+++ Snarl/Planning/game-manager.md	(date 1614808033727)
@@ -1,7 +1,7 @@
 ```java
 /**
  * Specifies The interface for the Game Manager which:
- * - validates and accepts players with unique name to the game 
+ * - validates and accepts players with unique names into the game 
  * - and starts a game with a single level, which will be provided. 
  */
 public interface GameManager {
@@ -13,14 +13,14 @@
    * @param level The single level at which the game starts
    * @throws IllegalArgumentException if the level is not possible or a Player has an invalid name
    */
-  public void startGame(List<Player> players, Level level) throws IllegalArgumentException;
+   void startGame(List<Player> players, Level level) throws IllegalArgumentException;
 
    /**
-   * Return a boolean that validates or invalidates a player based on their username being unique 
+   * Registers a Player only after validating if the username is unique 
    *
-   * @return boolean if a player is valid or not
+   * @param player Player whose name is going to validated 
    */
-  boolean validatePlayer(Player player);
+  void register(Player player);
 
    /**
    * Void function that acts like a switch case that updates the game as the Player makes moves.
@@ -28,7 +28,7 @@
    * @return the updated game state
    * @throws IllegalArgumentException if the game state is invalid
    */
-  public void update() throws IllegalArgumentException;
+   void update() throws IllegalArgumentException;
 
 
 }
